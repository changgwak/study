# ----------------------------------------------------------------------------
# AMCL Parameters (for future use)
# ----------------------------------------------------------------------------
amcl:
  ros__parameters:
    use_sim_time: false
    base_frame_id: base_link
    odom_frame_id: odom
    global_frame_id: map
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    scan_topic: scan
    tf_broadcast: true
    transform_tolerance: 1.0
    max_particles: 2000
    min_particles: 500
    update_min_d: 0.25
    update_min_a: 0.2
    resample_interval: 1
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    laser_model_type: likelihood_field
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_likelihood_max_dist: 2.0
    z_hit: 0.5
    z_short: 0.05
    z_max: 0.05
    z_rand: 0.5
    sigma_hit: 0.2
    lambda_short: 0.1
    do_beamskip: false
    beam_skip_distance: 0.5
    beam_skip_threshold: 0.3
    beam_skip_error_threshold: 0.9
    save_pose_rate: 0.5
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0



# ----------------------------------------------------------------------------
# Core BT Navigator
# ----------------------------------------------------------------------------
bt_navigator:
  ros__parameters:
    use_sim_time: false
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    action_server_result_timeout: 900.0
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.

    # plugin_lib_names is used to add custom BT plugins to the executor (vector of strings).
    # Built-in plugins are added automatically
    # plugin_lib_names: []

    error_code_names: ["compute_path_error_code", "follow_path_error_code"]

# ----------------------------------------------------------------------------
# Controller Server - MPPI
# ----------------------------------------------------------------------------
controller_server:
  ros__parameters:
    use_sim_time: false
    cmd_vel_topic: /cmd_vel
    controller_frequency: 25.0
    costmap_update_timeout: 0.3
    min_x_velocity_threshold: 0.01
    min_y_velocity_threshold: 0.0
    min_theta_velocity_threshold: 0.01
    failure_tolerance: 0.1
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["precise_goal_checker"]
    controller_plugins: ["FollowPath"]

    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 15.0

    precise_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.03
      yaw_goal_tolerance: 0.05
      stateful: true

    FollowPath:
      plugin: "nav2_mppi_controller::MPPIController"
      time_steps: 64
      model_dt: 0.04
      batch_size: 2000
      vx_max: 0.4
      vx_min: -0.1
      vy_max: 0.0
      wz_max: 1.2
      ax_max: 1.5
      ax_min: -1.5
      az_max: 2.5
      vx_std: 0.15
      wz_std: 0.3
      iteration_count: 1
      prune_distance: 1.2
      temperature: 0.5
      gamma: 0.015
      motion_model: "DiffDrive"
      transform_tolerance: 0.1
      visualize: false
      regenerate_noises: true
      TrajectoryVisualizer:
        trajectory_step: 4
        time_step: 3
      critics: [
        "ConstraintCritic", "CostCritic", "GoalCritic",
        "GoalAngleCritic", "PathAlignCritic", "PathFollowCritic",
        "PathAngleCritic", "PreferForwardCritic"]

      ConstraintCritic:
        enabled: true
        cost_weight: 4.0

      CostCritic:
        enabled: true
        cost_weight: 3.5
        collision_cost: 1000000.0

      GoalCritic:
        enabled: true
        cost_weight: 5.0
        threshold_to_consider: 1.0

      GoalAngleCritic:
        enabled: true
        cost_weight: 4.0
        threshold_to_consider: 0.5

      PreferForwardCritic:
        enabled: true
        cost_weight: 6.0
        threshold_to_consider: 0.5

      PathAlignCritic:
        enabled: true
        cost_weight: 14.0
        threshold_to_consider: 0.5

      PathFollowCritic:
        enabled: true
        cost_weight: 5.0

      PathAngleCritic:
        enabled: true
        cost_weight: 2.0
        threshold_to_consider: 0.5

# ----------------------------------------------------------------------------
# Planner Server - Smac Hybrid A*
# ----------------------------------------------------------------------------
planner_server:
  ros__parameters:
    expected_planner_frequency: 10.0
    planner_plugins: ["SmacPlannerHybrid"]
    costmap_update_timeout: 1.0
    SmacPlannerHybrid:
      plugin: "nav2_smac_planner/SmacPlannerHybrid"
      tolerance: 0.05
      allow_unknown: false
      downsample_costmap: false
      downsampling_factor: 1
      angle_quantization_bins: 72
      # motion_model_for_search: "DUBIN"
      motion_model_for_search: "REEDS_SHEPP"
      minimum_turning_radius: 0.25
      reverse_penalty: 2.5
      # change_penalty: 0.05  # for DUBINS
      change_penalty: 0.1
      non_straight_penalty: 1.05
      cost_penalty: 2.0
      rotation_penalty: 3.0
      analytic_expansion_ratio: 3.5
      analytic_expansion_max_length: 3.0
      lookup_table_size: 20.0
      allow_reverse_expansion: true
      max_planning_time: 3.0
      smooth_path: true
      smoother:
        max_iterations: 200
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1.0e-10

# ----------------------------------------------------------------------------
# Costmaps (Local & Global)
# ----------------------------------------------------------------------------
local_costmap:
  local_costmap:
    ros__parameters:
      global_frame: odom
      robot_base_frame: base_link
      update_frequency: 5.0
      publish_frequency: 5.0
      rolling_window: true
      width: 8.0
      height: 8.0
      resolution: 0.05
      footprint: "[[-0.60,-0.45],[-0.60,0.45],[0.60,0.45],[0.60,-0.45]]"
      footprint_padding: 0.03
      plugins: ["voxel_layer", "inflation_layer"]

      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: true
        publish_voxel_map: false
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        observation_sources: scan
        scan:
          topic: /scan
          data_type: LaserScan
          marking: true
          clearing: true
          raytrace_max_range: 5.0
          obstacle_max_range: 4.5

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        inflation_radius: 0.4
        cost_scaling_factor: 3.0

global_costmap:
  global_costmap:
    ros__parameters:
      global_frame: map
      robot_base_frame: base_link
      update_frequency: 1.0
      publish_frequency: 1.0
      resolution: 0.05
      footprint: "[[-0.60,-0.45],[-0.60,0.45],[0.60,0.45],[0.60,-0.45]]"
      footprint_padding: 0.03
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]

      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: true

      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        observation_sources: scan
        scan:
          topic: /scan
          data_type: LaserScan
          marking: true
          clearing: true
          raytrace_max_range: 5.0
          obstacle_max_range: 4.5

      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        inflation_radius: 0.4
        cost_scaling_factor: 3.0

# The yaml_filename does not need to be specified since it going to be set by defaults in launch.
# If you'd rather set it in the yaml, remove the default "map" value in the tb3_simulation_launch.py
# file & provide full path to map below. If CLI map configuration or launch default is provided, that will be used.
map_server:
  ros__parameters:
    yaml_filename: ""

map_saver:
  ros__parameters:
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

smoother_server:
  ros__parameters:
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 1000
      do_refinement: True

# ----------------------------------------------------------------------------
# Behavior Server
# ----------------------------------------------------------------------------
behavior_server:
  ros__parameters:
    cycle_frequency: 10.0
    local_frame: odom
    global_frame: map
    robot_base_frame: base_link
    transform_tolerance: 0.1
    simulate_ahead_time: 1.5
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.0
    behavior_plugins: ["drive_on_heading", "wait"]
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
    wait:
      plugin: "nav2_behaviors::Wait"


waypoint_follower:
  ros__parameters:
    loop_rate: 20   
    stop_on_failure: false
    action_server_result_timeout: 900.0
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 0    

velocity_smoother:
  ros__parameters:
    enabled: false
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.5, 0.0, 2.0]
    min_velocity: [-0.5, 0.0, -2.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0


# ----------------------------------------------------------------------------
# Collision Monitor
# ----------------------------------------------------------------------------
collision_monitor:
  ros__parameters:
    enabled: true
    base_frame_id: base_link
    odom_frame_id: odom
    cmd_vel_in_topic: cmd_vel
    cmd_vel_out_topic: cmd_vel_filtered
    state_topic: collision_monitor_state
    transform_tolerance: 0.2
    source_timeout: 1.0
    base_shift_correction: true
    stop_pub_timeout: 2.0
    polygons: ["FootprintApproach"]

    FootprintApproach:
      type: polygon
      action_type: approach
      footprint_topic: /local_costmap/published_footprint
      time_before_collision: 1.2
      simulation_time_step: 0.1
      min_points: 6
      visualize: false
      enabled: true

    observation_sources: ["scan"]
    scan:
      type: scan
      topic: scan
      min_height: 0.0
      max_height: 2.0
      enabled: true




docking_server:
  ros__parameters:
    controller_frequency: 50.0
    initial_perception_timeout: 5.0
    wait_charge_timeout: 5.0
    dock_approach_timeout: 30.0
    undock_linear_tolerance: 0.05
    undock_angular_tolerance: 0.1
    max_retries: 3
    base_frame: "base_link"
    fixed_frame: "odom"
    dock_backwards: false
    dock_prestaging_tolerance: 0.5

    # Types of docks
    dock_plugins: ['simple_charging_dock']
    simple_charging_dock:
      plugin: 'opennav_docking::SimpleChargingDock'
      docking_threshold: 0.05
      staging_x_offset: -0.7
      use_external_detection_pose: true
      use_battery_status: false # true
      use_stall_detection: false # true

      external_detection_timeout: 1.0
      external_detection_translation_x: -0.18
      external_detection_translation_y: 0.0
      external_detection_rotation_roll: -1.57
      external_detection_rotation_pitch: -1.57
      external_detection_rotation_yaw: 0.0
      filter_coef: 0.1

    # Dock instances
    # The following example illustrates configuring dock instances.
    # docks: ['home_dock']  # Input your docks here
    # home_dock:
    #   type: 'simple_charging_dock'
    #   frame: map
    #   pose: [0.0, 0.0, 0.0]

    controller:
      k_phi: 3.0
      k_delta: 2.0
      v_linear_min: 0.15
      v_linear_max: 0.15
      use_collision_detection: true
      costmap_topic: "/local_costmap/costmap_raw"
      footprint_topic: "/local_costmap/published_footprint"
      transform_tolerance: 0.1
      projection_time: 5.0
      simulation_step: 0.1
      dock_collision_threshold: 0.3

loopback_simulator:
  ros__parameters:
    base_frame_id: "base_link" #"base_footprint"
    odom_frame_id: "odom"
    map_frame_id: "map"
    scan_frame_id: "base_scan"  # tb4_loopback_simulator.launch.py remaps to 'rplidar_link'
    update_duration: 0.02
